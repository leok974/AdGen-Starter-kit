name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  smoke-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl unzip
      
      - name: Validate Docker setup
        run: |
          docker --version
          docker compose --version
      
      # Debug step to check directory structure
      - name: Debug directory structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Repository structure:"
          find . -name "Dockerfile" -type f || echo "No Dockerfiles found"
          echo "adgen directory contents:"
          ls -la adgen/ || echo "adgen directory not found"
          echo "docker-compose.dev.yml exists:"
          ls -la adgen/docker-compose.dev.yml || echo "docker-compose.dev.yml not found"
          echo "Checking if docker-compose.dev.yml has correct paths:"
          cat adgen/docker-compose.dev.yml || echo "Cannot read docker-compose.dev.yml"
      
      - name: Start API in test mode
        run: |
          # Create .env file with test mode
          echo "COMFY_MODE=test" > adgen/.env
          echo "TEST_MODE=true" >> adgen/.env
          
          # Show current directory for docker compose
          cd adgen
          echo "Working directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          
          # Start services with explicit build context
          docker compose -f docker-compose.dev.yml up -d --build
        env:
          COMPOSE_DOCKER_CLI_BUILD: 1
          DOCKER_BUILDKIT: 1
      
      - name: Wait for service health
        run: |
          # Wait up to 60 seconds for service to be healthy
          for i in {1..30}; do
            if curl -sf http://localhost:8000/health; then
              echo "✅ Service is healthy"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Service failed to start"
              echo "=== Container Logs ==="
              docker logs adgen-api || docker logs adgen_api_1 || docker logs adgen-adgen-api-1 || echo "Could not find container logs"
              echo "=== Container Status ==="
              docker ps -a
              exit 1
            fi
            echo "⏳ Waiting for service... ($i/30)"
            sleep 2
          done
          
          # Verify detailed health
          curl -sf http://localhost:8000/health/detailed | jq . || echo "Detailed health check not available"
      
      - name: Run smoke test
        run: |
          if [ -f scripts/smoke.sh ]; then
            bash scripts/smoke.sh http://localhost:8000 "CI test prompt"
          else
            echo "Smoke test script not found, running basic test instead"
            # Basic API test
            curl -sf -X POST http://localhost:8000/generate \
              -H 'content-type: application/json' \
              -d '{"prompt":"test prompt for CI"}' | jq .
          fi
        env:
          TIMEOUT: 60
      
      - name: Test delete endpoint
        run: |
          # Generate a run to delete
          gen=$(curl -sf -X POST http://localhost:8000/generate \
            -H 'content-type: application/json' \
            -d '{"prompt":"test for deletion"}')
          run_id=$(echo "$gen" | jq -r '.run_id')
          echo "Testing delete for run: $run_id"
          
          # Delete it
          curl -sf -X DELETE "http://localhost:8000/runs/$run_id"
          
          # Verify it's gone (should return empty files list)
          files=$(curl -sf "http://localhost:8000/runs/$run_id/files")
          if [[ $(echo "$files" | jq '.files | length') != "0" ]]; then
            echo "⚠️ Delete test inconclusive (files may not have been created yet)"
          fi
      
      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== API Logs ==="
          docker logs adgen-api || docker logs adgen_api_1 || docker logs adgen-adgen-api-1 || echo "Could not find API container"
          echo ""
          echo "=== All Container Logs ==="
          docker compose -f adgen/docker-compose.dev.yml logs || echo "Could not get compose logs"
          echo ""
          echo "=== Container Status ==="
          docker ps -a
          echo ""
          echo "=== Docker Compose Config ==="
          cd adgen && docker compose -f docker-compose.dev.yml config
      
      - name: Cleanup
        if: always()
        run: |
          cd adgen
          docker compose -f docker-compose.dev.yml down --remove-orphans --volumes || true
          docker system prune -f || true

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: 
          python-version: "3.11"
      - name: Install and run basic linting
        run: |
          pip install flake8 ruff black
          # Basic style checks (ignore line length for now)
          echo "Running flake8..."
          flake8 adgen/api/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
          
          echo "Running ruff check..."
          ruff check adgen/api/ || true
          
          echo "Running black check..."
          black --check adgen/api/ || true