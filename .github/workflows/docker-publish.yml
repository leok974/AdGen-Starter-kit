name: Docker Publish
on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

jobs:
  build-and-push-ghcr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      # Expose outputs for the deploy job
      gar-image-sha: ${{ env.GAR_IMAGE_SHA }}
      gar-image-latest: ${{ env.GAR_IMAGE_LATEST }}
    steps:
      - uses: actions/checkout@v4
      
      # Lowercase repo for GHCR tags (GHCR requires all-lowercase)
      - name: Prepare image tags
        run: |
          echo "IMAGE_NAME_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
      
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      
      - name: Configure Docker for GAR
        run: gcloud auth configure-docker "${{ secrets.GAR_LOCATION }}-docker.pkg.dev" --quiet
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      
      # Build once, push to GHCR + GAR with SHA and latest tags
      - name: Build & Push (GHCR + GAR)
        run: |
          GHCR_SHA="ghcr.io/${{ env.IMAGE_NAME_LC }}/adgen-api:${GITHUB_SHA}"
          GHCR_LATEST="ghcr.io/${{ env.IMAGE_NAME_LC }}/adgen-api:latest"
          GAR_SHA="${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY }}/adgen-api:${GITHUB_SHA}"
          GAR_LATEST="${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY }}/adgen-api:latest"
          
          echo "GHCR_SHA=$GHCR_SHA"
          echo "GHCR_LATEST=$GHCR_LATEST"
          echo "GAR_SHA=$GAR_SHA"
          echo "GAR_LATEST=$GAR_LATEST"
          
          # Verify Dockerfile exists
          if [ ! -f "adgen/api/Dockerfile" ]; then
            echo "Error: Dockerfile not found at adgen/api/Dockerfile"
            exit 1
          fi
          
          # Build and push with error handling
          docker buildx build \
            --platform linux/amd64 \
            --push \
            -f adgen/api/Dockerfile \
            --tag "$GHCR_SHA" \
            --tag "$GHCR_LATEST" \
            --tag "$GAR_SHA" \
            --tag "$GAR_LATEST" \
            adgen/api/ || { echo "Docker build failed"; exit 1; }
          
          # Expose for later steps (deploy uses GAR_SHA or GAR_LATEST)
          echo "GAR_IMAGE_SHA=$GAR_SHA" >> $GITHUB_ENV
          echo "GAR_IMAGE_LATEST=$GAR_LATEST" >> $GITHUB_ENV

  deploy-to-cloud-run:
    needs: build-and-push-ghcr
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment: production  # Add environment protection
    steps:
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      
      - name: 'Deploy to Cloud Run'
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: 'adgen-api'
          image: '${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GAR_REPOSITORY }}/adgen-api:${{ github.sha }}'
          region: '${{ secrets.GCP_REGION || 'us-central1' }}'  # Make region configurable
          flags: '--allow-unauthenticated --min-instances=0 --max-instances=3 --concurrency=80 --port=8080 --memory=2Gi --cpu=1'
          env_vars: |
            ENV=production
            LOG_LEVEL=info
      
      - name: Verify deployment
        run: |
          echo "Service URL: ${{ steps.deploy.outputs.url }}"
          echo "Service deployed successfully!"
      
      - name: Health check with retry
        run: |
          set -e
          URL="${{ steps.deploy.outputs.url }}"
          
          echo "Starting health checks for $URL"
          
          # Wait for service to be ready
          for i in {1..30}; do
            echo "Health check attempt $i/30"
            if curl -sf --max-time 10 "$URL/health"; then
              echo "✅ Health check passed!"
              break
            elif [ $i -eq 30 ]; then
              echo "❌ Health check failed after 30 attempts"
              exit 1
            else
              echo "⏳ Waiting 10 seconds before retry..."
              sleep 10
            fi
          done
          
          # Test main endpoint
          echo "Testing main endpoint..."
          if curl -sf --max-time 10 "$URL/"; then
            echo "✅ Main endpoint responding"
          else
            echo "⚠️  Main endpoint check failed (may be expected)"
          fi
      
      - name: Performance test (optional)
        continue-on-error: true
        run: |
          echo "Running basic performance test..."
          curl -w "@-" -o /dev/null -s "${{ steps.deploy.outputs.url }}/health" <<'EOF'
          Response time: %{time_total}s
          HTTP status: %{http_code}
          EOF